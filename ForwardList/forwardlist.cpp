#include <iostream>
using namespace std;

#define tab "\t"

class Element
{
	int Data;        //Значение элемента
	Element* pNext;  //Адрес следующего элемента
public:
	Element(int Data, Element* pNext =  nullptr)
	{
		this->Data = Data;
		this->pNext = pNext;
		cout << "EConstructor:\t" << this << endl;
	}
	~Element()
	{
		cout << "EDestructor:\t" << this << endl;
	}
	friend class ForwardList;
};

class ForwardList
{
	Element* head;
public:
	ForwardList()
	{
		//Конструктор по умолчанию - создает пустой список 
		head = nullptr; //Если список пуст, то его голова указывает на ноль.
		cout << "FLConstructor:\t" << this << endl;
	}
	~ForwardList()
	{
		cout << "LDestructor:\t" << this << endl;
	}

	// Adding elements;
	void push_front(int Data)
	{
		//1) Создаем элемент и сохраняем в него добавляемое значение
		Element* New = new Element(Data);

		//2) Привязываем новый созданный элемент к началу списка:
		New->pNext = head;

		//3) Переносим голову на новый элемент (отправляем новый элемент в голову):
		head = New;
	}

	//Methods:
	void print()const
	{
		Element* Temp = head; //Temp - это итератор.
		//Итератор - это указатель, при помощи которого можно перебирать элементы структуры данных
		while (Temp)
		{
			cout << Temp << tab << Temp->Data << tab << Temp->pNext << endl;
			Temp = Temp->pNext;
		}
	}
};

void main()
{
	setlocale(LC_ALL, "");
	
	int n;
	cout << "Введите размер списка: "; cin >> n;
	ForwardList list;
	for (int i = 0; i < n; i++)
	{
		list.push_front(rand() % 100);
	}
	list.print();
}

/*
Динамические структуры данных:

Простейшая структура данных, которую мы знаем - это массив. Это набор элементов одного типа в непрерывной области памяти. Из непрерывной области памяти вытекают как преимущества, так и недостатки массивов. Преимуществом массива является быстрый доступ к элементам который осуществляется за константное время, поскольку сводится к операции сложения.

Недостатком массивов является сложность добавления удаления элементов, что приводит к дополнительным затратам ресурсов памяти и процессорного времени, которое приводит к дополнительным затратам ресурсов памяти и процессорного времени, объем которых зависит от размера массива. Чем больше массив, тем больше ресурсов нужно затратить.

Недостатки массивов устраняют списки. Список (list) это набор элементов в произвольных областях памяти, каждый из которых, кроме значения, содержит адрес следующего элемента (иногда и предыдущее, в зависимости от типа списка). Это позволяет добавлять элементы в список за константное время, вообще не затрачивая дополнительных ресурсов. Поскольку элемент можно создать где угодно, где есть свободная память, и при этом, он будет привязан к списку. Но недостатком списка является медленный доступ к элементам, которые зависят от размеров списка.

Поскольку для того, чтобы дойти до нужного элемента списка, нужно пройти все элементы от начала списка до выбранного.

В то время, как массив обеспечивает произвольный доступ к элементам, список обеспечивает последовательный доступ к элементам.

У любого списка есть голова (head), которая содержит адрес начального элемента списка. В любой список можно зайти через голову.

Последний элемент списка всегда указывает на ноль. Указатель на ноль в элементе списка является признаком конца списка.

Реализация односвязного списка:

Односвязный список всегда реализуется при помощи двух классов:
1) Elememt - описывает структуру элемента. Состоит из поля данных и поля pNext
2) List (ForwardList) - объединяет элементы в список. Отвечает за добавление, удаление элементов и прочие операции
*/